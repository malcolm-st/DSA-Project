import tkinter as tk
from tkinter import font, filedialog
import docx
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import csv

bar_chart_created = False
bar_chart = None

def upload():
    file_path = filedialog.askopenfilename(filetypes=[("Word Documents", "*.docx")])
    if file_path:
        if file_path.endswith(".docx"):
            display_docx_content(file_path)
        else:
            print("Invalid file format. Please upload a DOCX file.")

def display_docx_content(file_path):
    doc = docx.Document(file_path)
    paragraphs = [paragraph.text for paragraph in doc.paragraphs]
    file_content = "\n".join(paragraphs)

    new_window = tk.Toplevel(root)
    new_window.title("DOCX Content")

    screen_width = new_window.winfo_screenwidth()
    screen_height = new_window.winfo_screenheight()

    content_text = tk.Text(new_window, bg="#f2f2f2", font=button_font, padx=10, pady=10)
    content_text.insert(tk.END, file_content)
    content_text.pack(fill="both", expand=True)


def update():
    print("Update button clicked")

def retrieve_data():
    print("Retrieve Data button clicked")

def show_page(page):
    page.tkraise()

root = tk.Tk()
root.title("CVE Aggregator")


# Get the screen width and height
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# Calculate the font size based on the screen height
title_font_size = int(screen_height / 20)
button_font_size = int(screen_height / 40)

# Create custom fonts with the calculated sizes
title_font = font.Font(size=title_font_size, weight="bold")
button_font = font.Font(size=button_font_size)

# Create a Frame to hold the pages
page_frame = tk.Frame(root)
page_frame.pack(fill="both", expand=True)

# Create the Home page
home_page = tk.Frame(page_frame, bg="#f2f2f2")
home_page.pack(fill="both", expand=True)

welcome_label = tk.Label(home_page, text="Welcome to CVE Aggregator", font=title_font, wraplength=screen_width - 100,  bg="#f2f2f2")
welcome_label.pack(pady=20)

# Configure button styles
button_style = {
    "bg": "#4CAF50",
    "fg": "white",
    "activebackground": "#45a049",
    "activeforeground": "white",
    "bd": 0,
    "width": 20,
    "font": button_font,
    "pady": 10
}

upload_button = tk.Button(home_page, text="Upload", command=upload, **button_style)
upload_button.pack(pady=10)

update_button = tk.Button(home_page, text="Update", command=update, **button_style)
update_button.pack(pady=10)

retrieve_button = tk.Button(home_page, text="Retrieve Data", command=retrieve_data, **button_style)
retrieve_button.pack(pady=10)



def show_toolcheck_page():
    for child in page_frame.winfo_children():
        child.pack_forget()
    home_page.pack_forget()
    label_cvesearch.pack_forget()
    label_analysis.pack_forget()
    label_toolcheck.pack(pady=20, side="top")
    toolcheck.pack(fill="both", expand=True)
    

  
def show_cvesearch_page():
    for child in page_frame.winfo_children():
        child.pack_forget()
    home_page.pack_forget()
    label_analysis.pack_forget()
    label_toolcheck.pack_forget()
    label_cvesearch.pack(pady=20, side="top")
    cvesearch.pack(fill="both", expand=True)

    # Create a frame for the search bar
    search_frame = tk.Frame(cvesearch, bg="light blue")
    search_frame.pack(side="top", fill="x")

    # Add search bar
    search_label = tk.Label(search_frame, text="Search:", font=button_font, bg="light blue")
    search_label.pack(side="left", padx=10)

    search_entry = tk.Entry(search_frame, font=button_font, width=30)
    search_entry.pack(side="left", padx=10)

    # Add sort by dropdown menu
    sort_label = tk.Label(search_frame, text="Sort by:", font=button_font, bg="light blue")
    sort_label.pack(side="left", padx=10)

    sort_var = tk.StringVar()
    sort_options = ["CveID", "Vendor", "Score", "Description"]
    sort_dropdown = tk.OptionMenu(search_frame, sort_var, *sort_options)
    sort_dropdown.pack(side="left", padx=10)

    # Create a frame for the search results
    results_frame = tk.Frame(cvesearch)
    results_frame.pack(fill="both", expand=True)

    # Create a Text widget to display the results
    results_text = tk.Text(results_frame, font=button_font, bg="#f2f2f2", padx=10, pady=10)
    results_text.pack(fill="both", expand=True)

    def search_cve_wrapper():
        search_text = search_entry.get()
        sort_by = sort_var.get()
        search_cve(search_text, sort_by, results_text)

    search_button = tk.Button(search_frame, text="Search", command=search_cve_wrapper, **button_style)
    search_button.pack(side="left", padx=10)


def search_cve(search_text, sort_by=None, results_text=None):

    # Read in the CVE data from a CSV file
    cve_data = pd.read_csv("output.csv")

    # Convert search_text to lowercase
    search_text = search_text.lower()

    # Filter the data based on the search text
    filtered_data = cve_data[cve_data["CveID"].str.lower().str.contains(search_text)]

    # Sort the filtered data by the specified column
    if sort_by is not None:
        filtered_data = filtered_data.sort_values(by=sort_by, ascending=True)

    # Create a formatted string with the column headings and the data
    columns = filtered_data.columns.tolist()
    formatted_data = ""
    formatted_data += "{:<15}{:<20}{:<10}{:<50}\n".format(columns[0], columns[1], columns[2], columns[3])
    formatted_data += "=" * 95 + "\n"

    for index, row in filtered_data.iterrows():
        cve_id = row[columns[0]]
        vendor = row[columns[1]]
        score = row[columns[2]]
        description = row[columns[3]]
        formatted_data += "{:<15}{:<20}{:<10}{:<50}\n".format(cve_id, vendor, score, description)

    # Clear the Text widget before displaying the new search results
    results_text.delete(1.0, tk.END)

    # Display the filtered results in the Text widget
    results_text.insert(tk.END, filtered_data.to_string(index=False))
def show_analysis_page():
    for child in page_frame.winfo_children():
        child.pack_forget()
    home_page.pack_forget()
    label_toolcheck.pack_forget()
    label_cvesearch.pack_forget()
    label_analysis.pack(pady=20, side="top")
    analysis.pack(fill="both", expand=True)

    if not bar_chart_created:
        create_bar_chart()
    else:
        # Remove the bar chart from the frame
        bar_chart.get_tk_widget().pack_forget()

    # Repack the bar chart and existing label
    bar_chart.get_tk_widget().pack(fill='both', expand=True)
    label_analysis.pack(pady=20, side="top")
    
def show_home_page():
    toolcheck.pack_forget()
    cvesearch.pack_forget()
    analysis.pack_forget()
    home_page.pack(fill="both", expand=True)   

def create_bar_chart():
    global bar_chart_created, bar_chart

    if not bar_chart_created:
    # Data for the bar chart
        CVEs = ['CVE-2020-1234', 'CVE-2021-1234', 'CVE-2022-1234']
        values = [40, 20, 15]

        # Create a bar chart
        plt.bar(CVEs, values)
        plt.xlabel('CVEs')
        plt.ylabel('Values')
        plt.title('Bar Chart for CVEs')

        # Display the bar chart
        fig = plt.gcf()  # Get the current figure
        bar_chart = FigureCanvasTkAgg(fig, master=analysis)
        bar_chart.draw()
        bar_chart.get_tk_widget().pack(fill='both', expand=True)
        bar_chart_created = True



# Create the Page 1
toolcheck = tk.Frame(page_frame, bg="light blue")
label_toolcheck = tk.Label(toolcheck, text="Tool Checker: Check for CVEs", font=title_font, bg="#f2f2f2")

# Create the Page 2
cvesearch = tk.Frame(page_frame, bg="light blue")
label_cvesearch = tk.Label(cvesearch, text="CVE Search", font=title_font, bg="#f2f2f2")


# Create the Page 3
analysis = tk.Frame(page_frame, bg="light blue")
label_analysis = tk.Label(analysis, text="Analysis of CVEs", font=title_font, bg="#f2f2f2")

# Create navigation buttons
nav_frame = tk.Frame(root, bg="#f2f2f2")
nav_frame.pack(side="bottom", pady=10)

home_button = tk.Button(nav_frame, text="Home", command=show_home_page, **button_style)
home_button.pack(side="left", padx=10)

page1_button = tk.Button(nav_frame, text="Tool Checker", command=show_toolcheck_page, **button_style)
page1_button.pack(side="left", padx=10)


page2_button = tk.Button(nav_frame, text="CVE Search", command=show_cvesearch_page, **button_style)
page2_button.pack(side="left", padx=10)

page3_button = tk.Button(nav_frame, text="Analysis", command=show_analysis_page, **button_style)
page3_button.pack(side="left", padx=10)

root.geometry(f"{screen_width}x{screen_height}")  # Set window size to full screen

# Create a Frame for the return button
return_frame = tk.Frame(cvesearch, bg="light blue")
return_frame.pack(side="bottom", fill="x")
    
# Add the return button
return_button = tk.Button(return_frame, text="Return to Home", command=show_home_page, **button_style)
return_button.pack(pady=10)


# Set initial page
show_page(home_page)

def quit_program():
    root.quit()

quit_button = tk.Button(nav_frame, text="Quit", command=quit_program, **button_style)
quit_button.pack(side="left", padx=10)


root.mainloop()